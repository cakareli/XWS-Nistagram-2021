version: "3.8"
services:

  gateway:
    image: nginx:1.19.8-alpine
    restart: on-failure
    ports:
      - 8081:8081
    networks:
      - backend
    volumes:
      - ./Gateway/nginx.conf:/etc/nginx/nginx.conf
      - ./Gateway/api_gateway.conf:/etc/nginx/api_gateway.conf

  authentication-service:
    image: authentication-service:compose_build
    restart: on-failure
    build:
      context: ./authenticationService
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      PORT: ${AUTHENTICATION_SERVICE_PORT}
      PSQL_USER: ${PSQL_USER}
      PSQL_PASS: ${PSQL_PASS}
      PSQL_DBNAME: ${PSQL_DBNAME}
      PSQL_PORT: ${PSQL_PORT}
    depends_on:
      - postgres

  user-service:
    image: user-service:compose_build
    restart: on-failure
    build:
      context: ./userService
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      PORT: ${USER_SERVICE_PORT}
      AUTHENTICATION_SERVICE_DOMAIN: ${AUTHENTICATION_SERVICE_DOMAIN}
      AUTHENTICATION_SERVICE_PORT: ${AUTHENTICATION_SERVICE_PORT}
      MEDIA_CONTENT_SERVICE_DOMAIN: ${MEDIA_CONTENT_SERVICE_DOMAIN}
      MEDIA_CONTENT_SERVICE_PORT: ${MEDIA_CONTENT_SERVICE_PORT}
    depends_on:
      - mongo-db

  media-content-service:
    image: media-content-service:compose_build
    restart: on-failure
    build:
      context: ./mediaContentService
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      PORT: ${MEDIA_CONTENT_SERVICE_PORT}
      USER_SERVICE_DOMAIN: ${USER_SERVICE_DOMAIN}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      FOLLOW_SERVICE_DOMAIN: ${FOLLOW_SERVICE_DOMAIN}
      FOLLOW_SERVICE_PORT: ${FOLLOW_SERVICE_PORT}
    depends_on:
      - mongo-db

  follow-service:
    image: follow-service:compose_build
    restart: on-failure
    build:
      context: ./followService
      dockerfile: Dockerfile
    depends_on:
      - neo4j
    networks:
      - backend
    environment:
      PORT: ${FOLLOW_SERVICE_PORT}
      USER_SERVICE_DOMAIN: ${USER_SERVICE_DOMAIN}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}

  notification-service:
    image: notification-service:compose_build
    restart: on-failure
    build:
      context: ./notificationService
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      PORT: ${NOTIFICATION_SERVICE_PORT}

  mongo-db:
    image: mongo
    restart: on-failure
    ports:
      - 27017:27017
    volumes:
      - /data/db:/data/db
    networks:
      - backend

  neo4j:
    image: neo4j:latest
    container_name: 'neo4j-db'
    volumes:
      - ./neo4j/plugins:/plugins
    environment:
      NEO4J_AUTH: ${NEO4J_AUTH}
    ports:
      - 7474:7474
      - 7687:7687
    restart: on-failure
    networks:
      - backend
    command: neo4j

  postgres:
    image: postgres
    restart: on-failure
    environment:
      POSTGRES_USER: ${PSQL_USER}
      POSTGRES_DB: ${PSQL_DBNAME}
      POSTGRES_PASSWORD: ${PSQL_PASS}
    ports:
      - 5432:5432
    volumes:
      - ./postgre-volumes:/data/db
    networks:
      - backend

networks:
  backend:
    name: nistagram-backend
    driver: bridge